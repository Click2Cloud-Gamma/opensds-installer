# Copyright (c) 2018 Huawei Technologies Co., Ltd. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: install Red Hat system packages
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - librados-devel
    - librbd-devel
  when: ansible_os_family == "RedHat" and deploy_project != "gelato"

- name: install Ubuntu system packages
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - librados-dev
    - librbd-dev
  when: ansible_os_family == "Debian" and deploy_project != "gelato"

- name: create opensds work directory if it doesn't exist
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - "{{ hotpot_work_dir }}"
    - "{{ opensds_config_dir }}"
    - "{{ opensds_driver_config_dir }}"
    - "{{ opensds_log_dir }}"
  when: deploy_project != "gelato"

- name: include scenarios/repository.yml when installing from repository
  include: scenarios/repository.yml
  when: install_from == "repository" and deploy_project != "gelato"

- name: include scenarios/release.yml when installing from release
  include: scenarios/release.yml
  when: install_from == "release" and deploy_project != "gelato"

- name: include scenarios/container.yml when installing from container
  include: scenarios/container.yml
  when: install_from == "container" and deploy_project != "gelato"

- name: hotpot keystone configuration
  shell: "{{ item }}"
  with_items:
    - bash ./script/keystone.sh config hotpot
  when: opensds_auth_strategy == "keystone" and deploy_project != "gelato"
  become: yes

- name: copy config templates into opensds global config folder
  copy:
    src: ../../../../conf/
    dest: "{{ opensds_config_dir }}"
  when: deploy_project != "gelato"

- name: generate certificates
  shell: "{{ item }}"
  with_items:
    - bash ./script/create_cert.sh "{{ opensds_certs_dir }}"
  become: yes	
  when: deploy_project != "gelato"

- name: configure opensds global info
  shell: |
    cat >> opensds.conf <<OPENSDS_GLOABL_CONFIG_DOC
    [osdslet]
    api_endpoint = {{ controller_endpoint }}
    graceful = True
    log_file = {{ controller_log_file }}
    socket_order = inc
    auth_strategy = {{ opensds_auth_strategy }}
    # If https is enabled, the default value of cert file
    # is /opt/opensds-security/opensds/opensds-cert.pem, 
    # and key file is /opt/opensds-security/opensds/opensds-key.pem
    https_enabled = False
    beego_https_cert_file =
    beego_https_key_file =
    # Encryption and decryption tool. Default value is aes.
    password_decrypt_tool = aes

    [osdsdock]
    api_endpoint = {{ dock_endpoint }}
    log_file = {{ dock_log_file }}
    # Choose the type of dock resource, only support 'provisioner' and 'attacher'.
    dock_type = {{ dock_type }}
    # Specify which backends should be enabled, sample,ceph,cinder,lvm and so on.
    enabled_backends = {{ enabled_backend }}

    [database]
    endpoint = {{ db_endpoint }}
    driver = {{ db_driver }}
  args:
    chdir: "{{ opensds_config_dir }}"
  ignore_errors: yes
  when: deploy_project != "gelato"

- name: run osdslet daemon service
  shell:
    cmd: |
      i=0
      while
        i="$((i+1))"
        [ "$i" -lt 4 ]
      do
        nohup bin/osdslet > osdslet.out 2> osdslet.err < /dev/null &
        sleep 5
        ps aux | grep osdslet | grep -v grep && break
      done
  args:
    chdir: "{{ hotpot_work_dir }}"
  when: deploy_project != "gelato" and install_from != "container"

- name: run osdslet containerized service
  docker_container:
    name: osdslet
    image: "{{ controller_docker_image }}"
    state: started
    network_mode: host
    volumes:
    - "/etc/opensds/:/etc/opensds"
  when: deploy_project != "gelato" and install_from == "container"
